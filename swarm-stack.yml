version: "3.8"

services:
  laundry-api:
    image: definya/definya-team:api-latest
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5002"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker #! Only runs in worker node to preserve the DB on the manager node
        preferences:
          - spread: node.id
        max_replicas_per_node: 1
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 2
        delay: 10s
      labels:
        # Basic setup for API
        - traefik.enable=true
        - traefik.http.routers.laundry-api.rule=Host(`na.definya.com`)
        - traefik.http.routers.laundry-api.entrypoints=websecure
        - traefik.http.routers.laundry-api.tls.certresolver=myresolver
        - traefik.http.services.laundry-api-service.loadbalancer.server.port=5002
        - traefik.http.routers.laundry-api.service=laundry-api-service

        # Websockets
        - traefik.http.routers.laundry-api-socket.rule=Host(`na.definya.com`) && Path(`/socket.io/`)
        - traefik.http.routers.laundry-api-socket.entrypoints=websecure
        - traefik.http.routers.laundry-api-socket.tls.certresolver=myresolver
        - traefik.http.services.laundry-api-socket-service.loadbalancer.server.port=5101
        - traefik.http.routers.laundry-api-socket.service=laundry-api-socket-service

        # Add sticky session for websockets
        - "traefik.http.services.laundry-api-socket-service.loadbalancer.sticky=true"
        - "traefik.http.services.laundry-api-socket-service.loadbalancer.sticky.cookie.name=StickyCookie"
        - "traefik.http.services.laundry-api-socket-service.loadbalancer.sticky.cookie.secure=true"
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      FORCE_COLOR: "true"
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NEW_RELIC_APP_NAME: "Definya API"
    networks:
      - laundry-network

  laundry-client:
    image: definya/definya-team:client-latest
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080"]
      interval: 120s
      timeout: 10s
      retries: 3
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.laundry-client.rule=Host(`play.definya.com`)"
        - "traefik.http.routers.laundry-client.entrypoints=websecure"
        - "traefik.http.routers.laundry-client.tls.certresolver=myresolver"
        - "traefik.http.services.laundry-client.loadbalancer.server.port=8080"
      placement:
        constraints:
          - node.role == manager
    networks:
      - laundry-network

  laundy-db:
    image: mongo:7.0.0
    command: mongod --port ${MONGO_PORT}
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - laundy-db-data:/data/db
      - ./docker_scripts/:/docker-entrypoint-initdb.d
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    deploy: # db should be only on the manager node
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "mongosh", "--port", "${MONGO_PORT}", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 30s
      timeout: 15s
      retries: 3
    networks:
      - laundry-network

  laundry-redis:
    image: redis:7.2.0
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - laundry-redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--port", "${REDIS_PORT}"]
    networks:
      - laundry-network
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 30s
      timeout: 15s
      retries: 3

  newrelic-infra:
    image: newrelic/infrastructure:latest
    environment:
      NRIA_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NRIA_DISPLAY_NAME: "Laundry API Docker"
    volumes:
      - "/:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
    cap_add:
      - SYS_PTRACE

networks:
  laundry-network:
    external: true

volumes:
  laundy-db-data:
  laundry-redis-data:
