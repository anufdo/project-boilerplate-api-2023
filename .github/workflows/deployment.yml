# Deploys to production when a commit is pushed to the production branch.

name: Deploy to Production
on:
  push:
    branches:
      - release

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 16.10.0
          cache: "yarn" # or 'npm' | 'pnpm'

      - name: Setup production credentials
        run: |
          yarn env:switch:prod
          echo "${{ secrets.API_ENV }}" > .env

      - name: Prepare, build and push Docker image
        run: |
          yarn install
          yarn tsc && yarn lint
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t definya/definya-team:api-latest .
          docker push definya/definya-team:api-latest

      - name: SSH into VPS and update containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull definya/definya-team:api-latest

            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            cd ~/definya/api
            git checkout release
            git pull origin release
            bash ~/definya/api/environment/post-receive-api.sh

            cd ~/definya/api/nginx-proxy
            docker-compose restart
